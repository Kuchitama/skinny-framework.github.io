# Skinny Framework
<hr/>

<img alt="Logo" src="/images/logo.png" width="200">

### GitHub Stats

<iframe src="http://ghbtns.com/github-btn.html?user=skinny-framework&repo=skinny-framework&type=watch&count=true&size=large" height="30" width="140" frameborder="0" scrolling="0" style="width:140px; height: 30px;" allowTransparency="true"></iframe>
<iframe src="http://ghbtns.com/github-btn.html?user=skinny-framework&repo=skinny-framework&type=fork&count=true&size=large" height="30" width="140" frameborder="0" scrolling="0" style="width:140px; height: 30px;" allowTransparency="true"></iframe>

<hr/>
## What's Skinny?
<hr/>

Skinny is a full-stack web app framework built on [Scalatra](http://scalatra.org).

To put it simply, Skinny framework's concept is **Scala on Rails**. Skinny is highly inspired by [Ruby on Rails](http://rubyonrails.org/) and it is optimized for sustainable productivity for Servlet-based web app development.

What's more, Skinny's components are basically independent from Skinny app environment. If you prefer using only Skinny ORM, Validator module or else, it's also possible. We hope Skinny components help developers that use other frameworks too.

Why Skinny named as Skinny? What does the name `Skinny` actually mean? We have three reasons as follows.

<code>Application should be skinny</code>

All the parts of a web application - controllers, models, views, routings and other settings - should be skinny. If you use Skinny framework, you can do without a lot of non-essential boilerplate code. For instance, when you create a simple registration form, all you need to do is define the parameters and validation rules and create view templates in an efficient way (ssp, scaml, jade, FreeMarker or something else) in most cases.

<code>Framework itself should be skinny</code>

Even if you need to investigate Skinny's internals, don't worry. Skinny keeps itself skinny, too. We believe that if the framework is well-designed, the resulting implementation will be skinny. 

<code>'su-ki-ni' in Japanese means 'as you like it'</code>

A sound-alike word **"好きに (su-ki-ni)"** in Japanese means **"as you like it"**. This is only half kidding but it also represents Skinny's concept. Skinny framework should provide flexible APIs to empower developers as much as possible and shouldn't get in the way.

<hr/>
## Try It Right Now
<hr/>

Download `skinny-blank-app(-with-deps).zip` and unzip it, then just run ./skinny (or skinny.bat) command on your terminal. That's all!

If you're a Scala beginner, `skinny-blank-app-with-deps.zip` is highly recommended. This is a bootstrap package which includes all library dependencies. 

Don't waste your passion by waiting for the download to complete!

<small>
If you're already familiar with Scala and your `sbt.ivy.home` directory has lots of assets, use `skinny-blank-app.zip` instead.
</small>

<hr/>
#### 1) skinny-blank-app-with-deps.zip (100MB)

For begineers, this one is highly recommended because you don't need to wait download dependencies.

[![Download](images/blank-app-with-deps-download.png)](https://github.com/skinny-framework/skinny-framework/releases/download/<%= @skinny_blank_app_version %>/skinny-blank-app-with-deps.zip)

#### 2) skinny-blank-app.zip (1MB)

If you're a heavy Scala user, this one will be suitable for you.

[![Download](images/blank-app-download.png)](https://github.com/skinny-framework/skinny-framework/releases/download/<%= @skinny_blank_app_version %>/skinny-blank-app.zip)

#### 3) Homebrew (brew tap)

If you're a MacOS X user, take a look at our Homebrew formula.

https://github.com/skinny-framework/homebrew-alt

```sh
brew tap skinny-framework/alt
brew install skinny

skinny new skinny-blank-app
cd skinny-blank-app
```

<hr/>

After unzipping blank-app.zip, Let's create our first Skinny app by using the scaffold generator.

<small>
<b>WARNING:</b> If you're going try with "users", use "accounts" or "members" instead.
"users" also exists in H2 information_schema. This may become a pitfall if you aren't conscious.
</small>

```sh
# If you're a zsh user, try "noglob ./skinny g scaffold ..."
./skinny g scaffold members member name:String activated:Boolean luckyNumber:Option[Long] birthday:Option[LocalDate]
./skinny db:migrate

# When you use IDE's debugger, use "./skinny debug" instead. (default JDWP port is 5005)
./skinny run
```

If you prefer Scalate templates precompilation, specify `-precompile` option too.

```sh
./skinny run -precompile
```

And then, access `http://localhost:8080/members`.

You can also run the generated tests.

```
./skinny db:migrate test
./skinny test
```

Now let's create a war file for deployment to a Servlet container.

```sh
./skinny package
```

It's also possible to build a standalone runnable jar file (with embedded Jetty server).

```sh
./skinny package:standalone
```

<hr/>
### Try by using Yeoman generator
<hr/>

![Yeoman](images/yeoman.png)

If you're familiar with [Yeoman](http://yeoman.io), a generator for [Skinny framework](https://github.com/skinny-framework/skinny-framework) is available.

[![NPM](https://nodei.co/npm/generator-skinny.png?downloads=true)](https://npmjs.org/package/generator-skinny)

```sh
# brew install node
npm install -g yo
npm install -g generator-skinny
mkdir skinny-app
cd skinny-app
yo skinny
./skinny run
```

<hr/>
### Integrating with existing Scalatra apps
<hr/>

Actually, an application built with Skinny framework is a normal Scalatra application.

After preparing the Scalatra app, just add the following dependency to your `project/Build.scala`.

```
libraryDependencies ++= Seq(
  "org.skinny-framework" %% "skinny-assets"       % "<%= @skinny_version %>",
  "org.skinny-framework" %% "skinny-framework"    % "<%= @skinny_version %>",
  "org.skinny-framework" %% "skinny-task"         % "<%= @skinny_version %>",
  "org.skinny-framework" %% "skinny-scaldi"       % "<%= @skinny_version %>",
  "org.skinny-framework" %% "skinny-test"         % "<%= @skinny_version %>" % "test",
  "org.skinny-framework" %% "skinny-factory-girl" % "<%= @skinny_version %>" % "test"
)
```

If you need only Skinny-ORM or Skinny-Validator, you can use only what you need. Even if you're using Play2 (or any other framework), these components are available for you as well.

```
libraryDependencies ++= Seq(
  "org.skinny-framework" %% "skinny-orm"          % "<%= @skinny_version %>",
  "org.skinny-framework" %% "skinny-mailer"       % "<%= @skinny_version %>",
  "org.skinny-framework" %% "skinny-standalone"   % "<%= @skinny_version %>",
  "org.skinny-framework" %% "skinny-validator"    % "<%= @skinny_version %>",
  "org.skinny-framework" %% "skinny-http-client"  % "<%= @skinny_version %>",
  "org.skinny-framework" %% "skinny-factory-girl" % "<%= @skinny_version %>" % "test"
)
```

<hr/>
### 1.2 Migration Guide for 1.1.x Users
<hr/>

APIs are basically compatible. If you don't have some extensions that depend on `LocaleFeature`, `RequestScopeFeature` and `SkinnySessionFilter` methods, 
your app will work fine without changing your code.

https://github.com/skinny-framework/skinny-framework/releases/tag/1.2.0

Though we believe migration is not difficult, please tell us here if you find something wrong.

https://github.com/skinny-framework/skinny-framework/issues

<hr/>
### 1.1 Migration Guide for 1.0.x Users
<hr/>

Skinny 1.1 APIs are basically compatible with Skinny 1.0 though the release includes basic dependencies' major upgrades. 
If your app depends on the dependencies directly (not via Skinny APIs), you may need to update your code.

- All the components run on Scala 2.11 or Scala 2.10 (Skinny 1.0: Scala 2.10)
- Web framework runs on Java 7 or higher (Skinny 1.0: Java 6 or higher) 
- Web framework is compatible with Servlet API 3.1 (Skinny 1.0: Servlet 3.0)
- Web framework depends on Scalatra 2.3 (Skinny 1.0: Scalatra 2.2)
- ORM depends on ScalikeJDBC 2.0 (Skinny 1.0: ScalikeJDBC 1.8)
- Migration command depends on Flyway 3.0 (Skinny 1.0: Flyway 2.3)
- Test support depends on ScalaTest 2.2 (Skinny 1.0: ScalaTest 1.9)

https://github.com/skinny-framework/skinny-framework/releases/tag/1.1.0

Though we believe migration is not difficult, please tell us here if you find something wrong.

https://github.com/skinny-framework/skinny-framework/issues

<hr/>
#### Update skinny project structure by using Yeoman

Yo can use Yeoman to merge updates in skinny-blank-app project. Yeoman's merging process is similar to Rails generator. Very easy to use!

```
npm install -g yo
npm install -g generator-skinny
yo skinny
```

<hr/>
#### "org.scalatest.matchers.ShouldMatchers" is deprecated

Use "org.scalatest.Matchers" instead. Sorry to say this.

<hr/>
#### Importing "scalikejdbc.SQLInterpolation._" is deprecated

Just import only "scalikejdbc._".

See also: https://github.com/skinny-framework/skinny-framework/commit/1e44f60e5c5d0f53ab0102697a00413ad7a696d0

<hr/>
#### Renamed joda-time APIs due to JSR-310

`WrappedResultSet#dateTime`, `#localDate`, `#localTime` and `#localDateTime` are deprecated and `#jodaDateTime` and #jodaXXX are added.

See also the issue: https://github.com/scalikejdbc/scalikejdbc/issues/222

Other changes in ScalikeJDBC 2.0:

https://github.com/scalikejdbc/scalikejdbc/blob/develop/notes/2.0.0.markdown

<hr/>
#### skinny package's Scalate precompilation error

Since Scalate 1.7.0, Skinny's blank app project's settings fail to execute `package` command.

```
default_ssp.scala:7: $_scalate_$default_ssp is already defined as object $_scalate_$default_ssp
```

Remove scalateSettings if your build settings loads it twice.

See also: https://github.com/skinny-framework/skinny-framework/commit/4ad2b874116ad3b60b76b104b2bf528106aeda87

<hr/>
## Skinny's Components Overview
<hr/>

### Routing & Controller & Validator
<hr/>

Skinny's routing mechanism and controller layer on MVC architecture can be thought of as a **rich Scalatra**. Skinny's extension provides you much simpler/rich syntax. Of course, if you need to use Scalatra's API directly, Skinny never bothers you.

![Scalatra](images/scalatra.png)

`SkinnyController` is a trait which extends `ScalatraFilter` and includes various useful components out-of-the-box. 

```scala
// src/main/scala/controller/MembersController.scala
class MembersController extends SkinnyController {
  def index = {
    set("members" -> Member.findAll()) // can call this in views
    render("/members/index")
  }
}
// src/main/scala/controller/Controllers.scala
object Controllers {
  object members extends MembersController with Routes {
    val indexUrl = get("/members/?")(index).as('index)
  }
}
// src/main/scala/ScalatraBootstrap.scala
class ScalatraBootstrap extends SkinnyLifeCycle {
  override def initSkinnyApp(ctx: ServletContext) {
    Controllers.members.mount(ctx)
  }
}
```

`SkinnyResource`, which is similar to Rails ActiveResource, is also available. It's a pretty DRY way to define RESTful resources.

```scala
object CompaniesController extends SkinnyResource {
  protectFromForgery()

  override def model = Company
  override def resourcesName = "companies"
  override def resourceName = "company"

  ...
}
```

`Company` object should implement `skinny.SkinnyModel` APIs and you should prepare some view templates under `src/main/webapp/WEB-INF/views/members/`.

See in detail: [Controller & Routes](documentation/controller-and-routes.html)

<hr/>
### Skinny ORM
<hr/>

Skinny provides you Skinny-ORM as the default O/R mapper, which is built with [ScalikeJDBC](https://github.com/scalikejdbc/scalikejdbc).

![Logo](images/scalikejdbc.png)

Skinny-ORM does a lot of work under the hood, so you don't need to write much code. Your first model class and companion are here.

```scala
case class Member(id: Long, name: String, createdAt: DateTime)

object Member extends SkinnyCRUDMapper[Member] {
  override def defaultAlias = createAlias("m")
  override def extract(rs: WrappedResultSet, n: ResultName[Member]) = new Member(
    id = rs.long(n.id),
    name = rs.string(n.name),
    createdAt = rs.dateTime(n.createdAt)
  )
}
```

That's all! Now you can use the following APIs.

```scala
// find by primary key
val member: Option[Member] = Member.findById(123)
val member: Option[Member] = Member.where('id -> 123).apply().headOption
val members: List[Member] = Member.where('id -> Seq(123, 234, 345)).apply()

// find many
val members: List[Member] = Member.findAll()
val groupMembers = Member.where('groupName -> "Scala Users", 'deleted -> false).apply()

// create with unsafe parameters
Member.createWithAttributes(
  'id -> 123,
  'name -> "Chris",
  'createdAt -> DateTime.now
)
// update with unsafe parameters
Member.updateById(123).withAttributes('name -> "Alice")
// delete
Member.deleteById(234)
```

See in detail: [O/R Mapper](documentation/orm.html)


<hr/>
### DB Migration with Flyway
<hr/>

DB migration is provided by [Flyway](http://flywaydb.org/). Usage is pretty simple.

![Flyway Logo](images/flyway.png)

```sh
./skinny db:migrate [env]
````

This command expects `src/main/resources/db/migration/V***__***.sql` files. 

See in detail: [DB Migration](documentation/db-migration.html)


<hr/>
### View Templates
<hr/>

Skinny framework basically follows Scalatra's [Scalate](http://scalate.fusesource.org/) Support, but Skinny has an additional convention.

![Scalate Logo](images/scalate.png)

Template paths should be of the form `{path}.{format}.{extension}`. Expected {format} are `html`, `json`, `js` and `xml`.

For instance, assuming your controller code looks like this:

```scala
class MembersController extends SkinnyController {
  def index = {
    set("members", Member.findAll())
    render("/members/index")
  }
}
```

The render method expects that `src/main/webapp/WEB-INF/views/members/index.html.ssp` exists.

```
<%%=@val members: Seq[model.Member] %>
<hr/>
#for (member <- members)
  ${member.name}
#end
```

Scalate supports many template engines. For example, if you want to write your template using Jade, save it as `src/main/webapp/WEB-INF/views/members/index.html.jade` instead.

See in detail: [View Templates](documentation/view-templates.html)

<hr/>
### Skinny Mailer
<hr/>

SkinnyMailer makes sending emails pretty easy.

```scala
val config = SkinnyMailerConfigdefault.copy(
  debug = true
)
val mailer = SkinnyMailer(config)

mailer
  .from("info@skinny-framework.org")
  .to("you@example.com")
  .cc("support@skinny-framework.org", "xxx@example.com")
  .subject("Skinny Framework 1.0.0 is out!")
  .body {
    """Hi all,
    |
    |We're very proud to announce that Skinny Framework version 1.0.0 is relaesed.
    |
    |.....
    |
    |Best,
    |Skinny Framework Team
    |""".stripMargin
  }.deliver()
```

See in detail: [Mail](documentation/mail.html)

<hr/>
### Assets Support (CoffeeScript, LESS, Sass, ReactJS, Scala.js)
<hr/>

![CoffeeScript Logo](images/coffeescript.png)
![LESS Logo](images/less.png)
![Sass Logo](images/sass.png)
![React Logo](images/react.png)
![Scala.js](images/scalajs.png)

First, add `skinny-assets` to libraryDependencies.

```
libraryDependencies ++= Seq(
  "org.skinny-framework" %% "skinny-framework" % "<%= @skinny_version %>",
  "org.skinny-framework" %% "skinny-assets"    % "<%= @skinny_version %>",
  "org.skinny-framework" %% "skinny-test"      % "<%= @skinny_version %>" % "test"
)
```

And then, add `AssetsController` to routes. Now you can easily use CoffeeScript, LESS and Sass.

```scala
// src/main/scala/ScalatraBootstrap.scala
class ScalatraBootstrap extends SkinnyLifeCycle {
  override def initSkinnyApp(ctx: ServletContext) {
    AssetsController.mount(ctx)
  }
}
```

AssetsController supports Last-Modified header and returns status 304 correctly if the requested file isn't changed. 

However, precompiling the assets is highly recommended in production (`./skinny package` does that).

See in detail: [Assets Support](documentation/assets.html)

<hr/>
### Angular.js Friendly Server Side
<hr/>

![Angular Logo](images/angularjs.png)

By using `AngularXHRServerFeature` trait, your controllers will be Angular.js friendly JSON API provider.

```scala
class ArticlesController extends SkinnyApiResource with AngularXHRServerFeature {
  // Enable Angular's XSRF protection
  protectFromForgery()

  // JSON request body will be merged into Scalatra params automatically
  // ...

}
```

And your ngResource is like this:


```javascript
app.factory('Article', ['$resource', function($resource) {
  return $resource('/api/articles/:id.json', {}, {});
}]);
```

See in detail: [Angular Support](documentation/angular.html)

<hr/>
### Testing Support
<hr/>

You can use Scalatra's great test support. Some extra optional features are provided by the skinny-test library.

```scala
class ControllerSpec extends ScalatraFlatSpec with SkinnyTestSupport {
  addFilter(MembersController, "/*")

  it should "show index page" in {
    withSession("userId" -> "Alice") {
      get("/members") { status should equal(200) }
    }
  }
}
```

See in detail: [Testing](documentation/testing.html)

<hr/>
### FactoryGirl
<hr/>

Though Skinny's FactoryGirl is not a complete port of [thoughtbot/factory_girl](https://github.com/thoughtbot/factory_girl), this module will be quite useful when testing your apps.

```scala
case class Company(id: Long, name: String)
object Company extends SkinnyCRUDMapper[Company] {
  def extract ...
}

val company1 = FactoryGirl(Company).create()
```

Configuration is not in yaml files but a typesafe-config conf file. In this example, `src/test/resources/factories.conf` looks like this:

```
company {
  name="Typesafe"
}
```

See in detail: [FactoryGirl](documentation/factory-girl.html)

<hr/>
### Skinny Framework Team and You
<hr/>

Skinny Framework team is passionately working on this project.

https://github.com/orgs/skinny-framework/members

If you're interested in Skinny development, pull requests are always welcome.

<a href="/contribution.html">How to contribute</a>

<hr/>
### Build Status
<hr/>

<a href="https://travis-ci.org/skinny-framework/skinny-framework"><img src="https://travis-ci.org/skinny-framework/skinny-framework.png" alt="Build Status"></a>

<hr/>
### Under The MIT License
<hr/>

(The MIT License)

Copyright (c) skinny-framework.org



